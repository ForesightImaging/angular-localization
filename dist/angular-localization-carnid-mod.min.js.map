{"version":3,"sources":["angular-localization-carnid-mod.js"],"names":["angular","window","document","undefined","module","constant","value","en","service","$injector","$http","$q","$log","$rootScope","$window","localeConf","localeEvents","localeSupported","localeFallbacks","splitToken","tok","key","path","allowNestedJson","split","length","slice","sym","push","join","isToken","str","TOKEN_REGEX","test","getPath","result","getKey","getBundle","i","bundles","isFrozen","obj","Object","$$frozen","freeze","replaceAll","substr","sub","replace","RegExp","loadBundle","token","parent","ref","root","locale","currentLocale","url","basePath","extend","_loading","fileExtension","get","success","data","hasOwnProperty","$broadcast","resourceUpdates","bundle","deferrences","resolve","error","err","reject","bundleReady","langFile","defer","promise","ready","paths","deferred","outstanding","isString","isArray","Error","forEach","all","applySubstitutions","text","subs","res","firstOfKind","v","k","getLocalizedString","txt","A","isValidToken","indexOf","delimiter","fromJson","isObject","info","updateHtmlTagLangAttr","lang","$html","attr","getLanguageSupported","language","foundLanguage","languageSuppported","fallbackLang","isUndefined","defaultLocale","setLocale","trim","localeChanges","cookieStore","put","cookieName","getLocale","getPreferredBrowserLanguage","nav","navigator","browserLanguagePropertyKeys","languages","initialSetLocale","validTokens","element","body","persistSelection","has","getString","filter","i18nFilter","input","args","$stateful","directive","$sce","setText","elm","tag","html","getTrustedHtml","update","string","optArgs","then","scope","attrs","hasObservers","$observe","newVal","oldVal","$attr","normAttr","observableAttrs","i18n","$on","setAttr","$attrs","$set","$normalize","getUpdateText","$scope","target","lastValues","attributes","exp","values","$eval","langFiles","priority","compile","$elem","i18nAttr","updateText","sharedDictionary","this"],"mappings":";;;;;;;CAAA,SAAAA,EAAAC,EAAAC,EAAAC,GACA,YAEAH,GAAAI,OAAA,yBACAC,SAAA,YAAA,SACAL,EAAAI,OAAA,cAAA,aAAA,oBAAA,oBAAA,kCAEAJ,EAAAI,OAAA,oCACAE,MAAA,mBACA,UAEAA,MAAA,mBACAC,GAAA,UAEAP,EAAAI,OAAA,cACAI,QAAA,UAAA,YAAA,QAAA,KAAA,OAAA,aAAA,UAAA,aAAA,eAAA,kBAAA,kBAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAaA,QAAAC,GAAAC,GACA,GAAAC,GAAAC,CACA,IAAAP,EAAAQ,gBAAA,CACA,GAAAC,GAAAJ,EAAAA,EAAAI,MAAA,OACAH,GAAAG,EAAAC,OAAA,EAAAD,EAAAE,MAAA,GAAA,GACAJ,EAAAE,EAAAC,OAAA,EAAAD,EAAA,GAAAA,MAAAG,MACAL,EAAAM,KAAAJ,EAAAC,OAAA,EAAAD,EAAA,GAAA,QAEAF,GAAAF,EAAAA,EAAAI,MAAA,KAAAK,KAAA,KAAAL,MAAA,QACAH,EAAAC,EAAAG,OAAA,EAAAH,EAAAA,EAAAG,OAAA,GAAA,EAEA,QACAJ,IAAAA,EACAC,KAAAA,GAIA,QAAAQ,GAAAC,GACA,MAAAA,IAAAA,EAAAN,QAAAO,EAAAC,KAAAF,GAGA,QAAAG,GAAAd,GACA,GAAAE,GAAAH,EAAAC,GAAAE,KACAa,EAAA,EAMA,OAJAb,GAAAG,OAAA,IACAU,EAAAb,EAAAI,MAAA,MAAAG,KAAAF,IAGAQ,EAGA,QAAAC,GAAAhB,GACA,MAAAD,GAAAC,GAAAC,IAGA,QAAAgB,GAAAjB,GACA,GAEAkB,GAFAH,EAAA,KACAb,EAAAH,EAAAC,GAAAE,IAGA,IAAAA,EAAAG,OAAA,EAGA,IAFAU,EAAAI,EAEAD,EAAA,EAAAA,EAAAhB,EAAAG,OAAA,EAAAa,IAAA,CACA,IAAAH,EAAAb,EAAAgB,IAEA,CACAH,EAAA,IACA,OAHAA,EAAAA,EAAAb,EAAAgB,IAQA,MAAAH,GAGA,QAAAK,GAAAC,GACA,OAAAC,OAAAF,UAAA,SAAAC,GACA,MAAAA,IAAAA,EAAAE,WACAF,GAGA,QAAAG,GAAAH,GACA,OAAAC,OAAAE,QAAA,SAAAH,GACAA,IACAA,EAAAE,UAAA,KAEAF,GAIA,QAAAI,GAAAd,EAAAe,EAAAC,GACA,MAAAhB,GAAAiB,QAAA,GAAAC,QAAAH,EAAAE,QAAA,sBAAA,QAAA,KAAAD,GAGA,QAAAG,GAAAC,GACA,GAEAC,GAGAC,EACAf,EANAhB,EAAAH,EAAAgC,GAAA7B,KACAgC,EAAAf,EAEAgB,EAAAC,EACAC,EAAA1C,EAAA2C,SAAA,IAAAH,CAIA,IAAAjC,EAAAG,OAAA,EAAA,CACA,IAAAa,EAAA,EAAAA,EAAAhB,EAAAG,OAAA,EAAAa,IACAe,EAAA/B,EAAAgB,GACAgB,EAAAD,KACAC,EAAAD,OAEAD,EAAAE,EACAA,EAAAA,EAAAD,GACAI,GAAA,IAAAJ,CAGAb,GAAAc,KACAA,EAAAtD,EAAA2D,UAAAL,IAEAA,EAAAM,WACAN,EAAAM,UAAA,EAEAH,GAAA1C,EAAA8C,cAEAnD,EAAAoD,IAAAL,GACAM,QAAA,SAAAC,GACA,GAAA3C,GACAC,EAAAY,EAAAiB,EAEA,KAAA9B,IAAA2C,GACAA,EAAAC,eAAA5C,KACAiC,EAAAjC,GAAA2C,EAAA3C,UAKAiC,GAAAM,SACAR,EAAAC,GAAAT,EAAAU,GACAA,EAAA,KAGAzC,EAAAqD,WAAAlD,EAAAmD,iBACAZ,OAAAA,EACAjC,KAAAA,EACA8C,OAAAhB,EAAAC,KAIAgB,EAAA/C,IACA+C,EAAA/C,GAAAgD,QAAAhD,KAGAiD,MAAA,SAAAC,GACA,GAAAlD,GAAAY,EAAAiB,EAEAvC,GAAA2D,MAAA,yCAAAd,SAGAH,GAAAM,SAGAS,EAAA/C,IACA+C,EAAA/C,GAAAmD,OAAAD,OAOA,QAAAE,GAAApD,GACA,GAAA8C,GACAjB,CAkBA,OAhBA7B,GAAAA,GAAAP,EAAA4D,SACAxB,EAAA7B,EAAA,YACA8C,EAAA/B,EAAAc,GAEAkB,EAAA/C,KACA+C,EAAA/C,GAAAX,EAAAiE,SAGAR,IAAAA,EAAAR,SACAS,EAAA/C,GAAAgD,QAAAhD,GAEA8C,GACAlB,EAAAC,GAIAkB,EAAA/C,GAAAuD,QAGA,QAAAC,GAAAxD,GACA,GAAAyD,GACAC,EACAC,CAEA,IAAAjF,EAAAkF,SAAA5D,GACAyD,EAAAzD,EAAAE,MAAA,SACA,CAAA,IAAAxB,EAAAmF,QAAA7D,GAGA,KAAA,IAAA8D,OAAA,iEAFAL,GAAAzD,EAeA,MAVAyD,GAAAtD,OAAA,GACAwD,KACAF,EAAAM,QAAA,SAAA/D,GACA2D,EAAArD,KAAA8C,EAAApD,MAEA0D,EAAArE,EAAA2E,IAAAL,IAEAD,EAAAN,EAAApD,GAGA0D,EAGA,QAAAO,GAAAC,EAAAC,GACA,GAAAC,GAAAF,EACAG,EAAA,CAqBA,OAnBAF,KACAzF,EAAAmF,QAAAM,GACAzF,EAAAqF,QAAAI,EAAA,SAAA1C,EAAAT,GACAoD,EAAA7C,EAAA6C,EAAA,KAAApD,EAAA,GAAAS,GACA2C,EAAA7C,EAAA6C,EAAA,KAAApD,EAAA,GAAA,IAAAS,KAGA/C,EAAAqF,QAAAI,EAAA,SAAAG,EAAAC,KACAF,EAEAD,EAAA7C,EAAA6C,EAAA,IAAAG,EAAA,IAAAD,GACAF,EAAA7C,EAAA6C,EAAA,IAAAG,EAAAD,GACAF,EAAA7C,EAAA6C,EAAA,IAAA,EAAAE,GACAF,EAAA7C,EAAA6C,EAAA,IAAA,EAAA,IAAAE,MAIAF,EAAAA,EAAA1C,QAAA,MAAA,QAKA,QAAA8C,GAAAC,EAAAN,GACA,GACArB,GACA/C,EACA2E,EAHA7D,EAAA,GAIA8D,GAAA,CASA,IAPAjG,EAAAkF,SAAAa,KAAAN,GAAAM,EAAAG,QAAAnF,EAAAoF,kBACAH,EAAAD,EAAAvE,MAAAT,EAAAoF,WACAJ,EAAAC,EAAA,GACAP,EAAAzF,EAAAoG,SAAAJ,EAAA,KAGAC,EAAAnE,EAAAiE,GAOA,GALA/F,EAAAqG,SAAAZ,KACAA,GAAAA,IAGArB,EAAA/B,EAAA0D,GACA3B,IAAAA,EAAAR,SAAA,CAEA,GADAvC,EAAAe,EAAA2D,GACAhF,EAAAQ,gBAAA,CACA,IAAA,GAAAe,GAAA,EAAAA,EAAAjB,EAAAI,OAAA,EAAAa,IAAA,CACA,IAAA8B,EAAA/C,EAAAiB,IAEA,CACA8B,EAAA,IACA,OAHAA,EAAAA,EAAA/C,EAAAiB,IAMAjB,EAAAA,EAAAA,EAAAI,OAAA,GAEA2C,EAAA/C,GACArB,EAAAkF,SAAAd,EAAA/C,IACAc,EAAAoD,EAAAnB,EAAA/C,GAAAoE,IAEA7E,EAAA0F,KAAA,8CAAAP,EAAA,4BACA5D,EAAA,uBAGAvB,EAAA0F,KAAA,wCAAAP,GACA5D,EAAA,yBAGAiC,IACAlB,EAAA6C,OAIA5D,GAAA4D,CAGA,OAAA5D,GAGA,QAAAoE,GAAAC,GACAA,EAAAA,EAAAhF,MAAA,KAAA,GAEAiF,EAAAC,KAAA,OAAAF,GAGA,QAAAG,GAAAC,GACA,GAAAC,GAAA,IACA,IAAAD,GAAAA,EAAAnF,SACAR,EAAAoE,QAAA,SAAAyB,GACA,GAAA,IAAAA,EAAAZ,QAAAU,GAEA,YADAC,EAAAC,MAIAD,GAAA,CACA,GAAAE,GAAA7F,EAAA0F,EAAApF,MAAA,KAAA,GACAxB,GAAAgH,YAAAD,KACAF,EAAAE,GAIA,MAAAF,IAAA9F,EAAAkG,cAGA,QAAAC,GAAA5G,GACA,GAAAkG,EAEAxG,GAAAkF,SAAA5E,IAAAA,EAAAmB,QACAnB,EAAAA,EAAA6G,OACAX,EAAAG,EAAArG,IAEAkG,EAAAzF,EAAAkG,cAGAT,IAAAhD,IACAjB,KACA8B,KACAb,EAAAgD,EAEAD,EAAAC,GAEA3F,EAAAqD,WAAAlD,EAAAoG,cAAA5D,GAEA6D,GACAA,EAAAC,IAAAvG,EAAAwG,WAAAf,IAKA,QAAAgB,KACA,MAAAhE,GAGA,QAAAiE,KACA,GAEAnF,GACAsE,EAHAc,EAAA5G,EAAA6G,UACAC,GAAA,WAAA,kBAAA,iBAAA,eAKA,IAAA5H,EAAAmF,QAAAuC,EAAAG,WACA,IAAAvF,EAAA,EAAAA,EAAAoF,EAAAG,UAAApG,OAAAa,IAEA,GADAsE,EAAAc,EAAAG,UAAAvF,GAEA,MAAAsE,EAKA,KAAAtE,EAAA,EAAAA,EAAAsF,EAAAnG,OAAAa,IAEA,GADAsE,EAAAc,EAAAE,EAAAtF,IAEA,MAAAsE,EAIA,OAAA,MAGA,QAAAkB,KACAZ,EAAAG,GAAAA,EAAAvD,IAAA/C,EAAAwG,YACAF,EAAAvD,IAAA/C,EAAAwG,YACAE,KAvXA,GAEAjE,GACAa,EACA9B,EACA8E,EALArF,EAAAjB,EAAAgH,aAAA,GAAA9E,QAAA,qDACAwD,EAAAzG,EAAAgI,QAAA9H,EAAA+H,MAAA7E,SAKAzB,EAAAZ,EAAAQ,gBAAA,IAAA,GAsXA,OApXAR,GAAAmH,kBAAAzH,EAAA0H,IAAA,kBACAd,EAAA5G,EAAAqD,IAAA,iBAiXAgE,KAGAhD,MAAAA,EACAhD,QAAAA,EACAI,QAAAA,EACAE,OAAAA,EACA8E,UAAAA,EACAM,UAAAA,EACAY,UAAAtC,EACA2B,4BAAAA,MAIAzH,EAAAI,OAAA,cACAiI,OAAA,QAAA,SAAA,SAAA9E,GACA,GAAA+E,GAAA,SAAAC,EAAAC,GACA,MAAAjF,GAAA6E,UAAAG,EAAAC,GAKA,OAFAF,GAAAG,WAAA,EAEAH,KAGAtI,EAAAI,OAAA,wBACAC,SAAA,gBACA8D,gBAAA,6BACAiD,cAAA,4BAEApH,EAAAI,OAAA,cACAsI,UAAA,QAAA,OAAA,SAAA,eAAA,aAAA,SAAAC,EAAApF,EAAAvC,EAAAD,GACA,QAAA6H,GAAAC,EAAAC,GACAA,IAAAD,EAAAE,QACAF,EAAAE,KAAAJ,EAAAK,eAAAF,IAIA,QAAAG,GAAAJ,EAAAK,EAAAC,GACA5F,EAAAzB,QAAAoH,GACA3F,EAAAuB,MAAAvB,EAAArB,QAAAgH,IAAAE,KAAA,WACAR,EAAAC,EAAAtF,EAAA6E,UAAAc,EAAAC,MAGAP,EAAAC,EAAAK,GAIA,MAAA,UAAAG,EAAAR,EAAAS,GACA,GAAAC,EAEAD,GAAAE,SAAA,OAAA,SAAAC,EAAAC,GACAD,GAAAA,IAAAC,GACAT,EAAAJ,EAAAY,EAAAF,KAIAvJ,EAAAqF,QAAAiE,EAAAK,MAAA,SAAAjD,EAAAkD,GACA7I,EAAA8I,gBAAA5H,KAAAyE,IACA4C,EAAAE,SAAAI,EAAA,SAAAH,IACAA,GAAAF,GAAAA,EAAAK,KACAL,EAAAA,MACAA,EAAAK,GAAAN,EAAAM,GACAX,EAAAJ,EAAAS,EAAAQ,KAAAP,QAMAF,EAAAU,IAAA/I,EAAAmD,gBAAA,WACA8E,EAAAJ,EAAAS,EAAAQ,KAAAP,KAEAF,EAAAU,IAAA/I,EAAAoG,cAAA,WACA6B,EAAAJ,EAAAS,EAAAQ,KAAAP,SAIAb,UAAA,YAAA,aAAA,SAAA,eAAA,SAAA7H,EAAA0C,EAAAvC,GACA,QAAAgJ,GAAAC,EAAA5I,EAAAf,GACA2J,EAAAC,KAAAD,EAAAE,WAAA9I,GAAAf,GAGA,QAAA8J,GAAAC,EAAAC,EAAAL,GACA,GAAAM,KACA,OAAA,UAAAC,GACA,GAEAC,GAFAC,EAAAL,EAAAM,MAAAH,GACAI,IAGA,KAAA,GAAAvJ,KAAAqJ,GACAD,EAAAC,EAAArJ,GACAkC,EAAAzB,QAAA2I,IAAAG,EAAA1E,QAAA3C,EAAArB,QAAAuI,UACAG,EAAAhJ,KAAA2B,EAAArB,QAAAuI,GAIAlH,GAAAuB,MAAA8F,GAAAxB,KAAA,WACA,GAAA9I,GAAA,EACA,KAAA,GAAAe,KAAAqJ,GACAD,EAAAC,EAAArJ,GACAf,EAAAiD,EAAA6E,UAAAqC,GACAF,EAAAlJ,KAAAf,IACAiK,EAAAlJ,GAAAf,EACA0J,EAAAC,EAAA5I,EAAAf,OAOA,OAEAuK,SAAA,IACAC,QAAA,SAAAC,EAAAd,GAOA,MANAjK,GAAAqF,QAAAxE,EAAA8J,MAAAV,EAAAe,UAAA,SAAA1K,EAAAe,GAGA2I,EAAAC,EAAA5I,EAAAf,GAAA,SAGA,SAAA+J,EAAAU,EAAAd,GACA,GAAAgB,GAAAb,EAAAC,EAAAU,EAAAd,EAEAA,GAAAT,SAAA,WAAA,SAAAC,GACAA,GACAwB,EAAAxB,KAIAY,EAAAN,IAAA/I,EAAAmD,gBAAA,WACA8G,EAAAhB,EAAAe,YAGAX,EAAAN,IAAA/I,EAAAoG,cAAA,WACA6D,EAAAhB,EAAAe,kBAOAhL,EAAAI,OAAA,wBACAE,MAAA,cACAoD,SAAA,YACAuD,cAAA,QACAiE,iBAAA,SACArH,cAAA,aACAqE,kBAAA,EACAX,WAAA,qBACAsC,gBAAA,GAAA5G,QAAA,sBACAkD,UAAA,KACA4B,YAAA,GAAA9E,QAAA,qDACA1B,iBAAA,KAGA4J,KAAAnL,QAAAmL,KAAAA,KAAAjL","file":"angular-localization-carnid-mod.min.js","sourcesContent":["/*!\n * angular-localization-carnid-mod :: v1.5.1 :: 2016-11-10\n * web: http://doshprompt.github.io/angular-localization\n *\n * Copyright (c) 2016 | Rahul Doshi\n * License: MIT\n */\n;(function (angular, window, document, undefined) {\r\n    'use strict';\r\n\nangular.module('ngLocalize.Version', [])\r\n    .constant('localeVer', '1.5.1');\nangular.module('ngLocalize', ['ngSanitize', 'ngLocalize.Config', 'ngLocalize.Events', 'ngLocalize.InstalledLanguages']);\r\n\nangular.module('ngLocalize.InstalledLanguages', [])\r\n    .value('localeSupported', [\r\n        'en-US'\r\n    ])\r\n    .value('localeFallbacks', {\r\n        'en': 'en-US'\r\n    });\nangular.module('ngLocalize')\r\n    .service('locale', function ($injector, $http, $q, $log, $rootScope, $window, localeConf, localeEvents, localeSupported, localeFallbacks) {\r\n        var TOKEN_REGEX = localeConf.validTokens || new RegExp('^([\\\\w-]+\\\\/)*([\\\\w-]+\\\\.)+([\\\\w\\\\s-])+\\\\w(:.*)?$'),\r\n            $html = angular.element(document.body).parent(),\r\n            currentLocale,\r\n            deferrences,\r\n            bundles,\r\n            cookieStore,\r\n            sym = localeConf.allowNestedJson ? '/' : '.';\r\n\r\n        if (localeConf.persistSelection && $injector.has('$cookieStore')) {\r\n            cookieStore = $injector.get('$cookieStore');\r\n        }\r\n\r\n        function splitToken(tok){\r\n            var key, path;\r\n            if (localeConf.allowNestedJson){\r\n                var split = tok ? tok.split('.') : [];\r\n                key = split.length > 1 ? split.slice(1) : '';\r\n                path = split.length > 0 ? split[0].split(sym) : [];\r\n                path.push(split.length > 1 ? split[1] : '');\r\n            } else {\r\n                path = tok ? tok.split('/').join('.').split('.') : [];\r\n                key = path.length > 1 ? path[path.length - 1] : '';\r\n            }\r\n            return {\r\n                key: key,\r\n                path: path\r\n            };\r\n        }\r\n\r\n        function isToken(str) {\r\n            return (str && str.length && TOKEN_REGEX.test(str));\r\n        }\r\n\r\n        function getPath(tok) {\r\n            var path = splitToken(tok).path,\r\n                result = '';\r\n\r\n            if (path.length > 1) {\r\n                result = path.slice(0, -1).join(sym);\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        function getKey(tok) {\r\n            return splitToken(tok).key;\r\n        }\r\n\r\n        function getBundle(tok) {\r\n            var result = null,\r\n                path = splitToken(tok).path,\r\n                i;\r\n\r\n            if (path.length > 1) {\r\n                result = bundles;\r\n\r\n                for (i = 0; i < path.length - 1; i++) {\r\n                    if (result[path[i]]) {\r\n                        result = result[path[i]];\r\n                    } else {\r\n                        result = null;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        function isFrozen (obj) {\r\n            return (Object.isFrozen || function (obj) {\r\n                return obj && obj.$$frozen;\r\n            })(obj);\r\n        }\r\n\r\n        function freeze (obj) {\r\n            return (Object.freeze || function (obj) {\r\n                if (obj) {\r\n                    obj.$$frozen = true;\r\n                }\r\n            })(obj);\r\n        }\r\n\r\n        // http://stackoverflow.com/a/17606289\r\n        function replaceAll(str, substr, sub) {\r\n            return str.replace(new RegExp(substr.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'g'), sub);\r\n        }\r\n\r\n        function loadBundle(token) {\r\n            var path = splitToken(token).path,\r\n                root = bundles,\r\n                parent,\r\n                locale = currentLocale,\r\n                url = localeConf.basePath + '/' + locale,\r\n                ref,\r\n                i;\r\n\r\n            if (path.length > 1) {\r\n                for (i = 0; i < path.length - 1; i++) {\r\n                    ref = path[i];\r\n                    if (!root[ref]) {\r\n                        root[ref] = {};\r\n                    }\r\n                    parent = root;\r\n                    root = root[ref];\r\n                    url += '/' + ref;\r\n                }\r\n\r\n                if (isFrozen(root)) {\r\n                    root = angular.extend({}, root);\r\n                }\r\n                if (!root._loading) {\r\n                    root._loading = true;\r\n\r\n                    url += localeConf.fileExtension;\r\n\r\n                    $http.get(url)\r\n                        .success(function (data) {\r\n                            var key,\r\n                                path = getPath(token);\r\n                            // Merge the contents of the obtained data into the stored bundle.\r\n                            for (key in data) {\r\n                                if (data.hasOwnProperty(key)) {\r\n                                    root[key] = data[key];\r\n                                }\r\n                            }\r\n\r\n                            // Mark the bundle as having been \"loaded\".\r\n                            delete root._loading;\r\n                            parent[ref] = freeze(root);\r\n                            root = null;\r\n\r\n                            // Notify anyone who cares to know about this event.\r\n                            $rootScope.$broadcast(localeEvents.resourceUpdates, {\r\n                                locale: locale,\r\n                                path: path,\r\n                                bundle: parent[ref]\r\n                            });\r\n\r\n                            // If we issued a Promise for this file, resolve it now.\r\n                            if (deferrences[path]) {\r\n                                deferrences[path].resolve(path);\r\n                            }\r\n                        })\r\n                        .error(function (err) {\r\n                            var path = getPath(token);\r\n\r\n                            $log.error('[localizationService] Failed to load: ' + url);\r\n\r\n                            // We can try it again later.\r\n                            delete root._loading;\r\n\r\n                            // If we issued a Promise for this file, reject it now.\r\n                            if (deferrences[path]) {\r\n                                deferrences[path].reject(err);\r\n                            }\r\n                        });\r\n                }\r\n            }\r\n        }\r\n\r\n        function bundleReady(path) {\r\n            var bundle,\r\n                token;\r\n\r\n            path = path || localeConf.langFile;\r\n            token = path + '._LOOKUP_';\r\n            bundle = getBundle(token);\r\n\r\n            if (!deferrences[path]) {\r\n                deferrences[path] = $q.defer();\r\n            }\r\n\r\n            if (bundle && !bundle._loading) {\r\n                deferrences[path].resolve(path);\r\n            } else {\r\n                if (!bundle) {\r\n                    loadBundle(token);\r\n                }\r\n            }\r\n\r\n            return deferrences[path].promise;\r\n        }\r\n\r\n        function ready(path) {\r\n            var paths,\r\n                deferred,\r\n                outstanding;\r\n\r\n            if (angular.isString(path)) {\r\n                paths = path.split(',');\r\n            } else if (angular.isArray(path)) {\r\n                paths = path;\r\n            } else {\r\n                throw new Error('locale.ready requires either an Array or comma-separated list.');\r\n            }\r\n\r\n            if (paths.length > 1) {\r\n                outstanding = [];\r\n                paths.forEach(function (path) {\r\n                    outstanding.push(bundleReady(path));\r\n                });\r\n                deferred = $q.all(outstanding);\r\n            } else {\r\n                deferred = bundleReady(path);\r\n            }\r\n\r\n            return deferred;\r\n        }\r\n\r\n        function applySubstitutions(text, subs) {\r\n            var res = text,\r\n                firstOfKind = 0;\r\n\r\n            if (subs) {\r\n                if (angular.isArray(subs)) {\r\n                    angular.forEach(subs, function (sub, i) {\r\n                        res = replaceAll(res, '%' + (i + 1), sub);\r\n                        res = replaceAll(res, '{' + (i + 1) + '}', sub);\r\n                    });\r\n                } else {\r\n                    angular.forEach(subs, function (v, k) {\r\n                        ++firstOfKind;\r\n\r\n                        res = replaceAll(res, '{' + k + '}', v);\r\n                        res = replaceAll(res, '%' + k, v);\r\n                        res = replaceAll(res, '%' + (firstOfKind), v);\r\n                        res = replaceAll(res, '{' + (firstOfKind) + '}', v);\r\n                    });\r\n                }\r\n            }\r\n            res = res.replace(/\\n/g, '<br>');\r\n\r\n            return res;\r\n        }\r\n\r\n        function getLocalizedString(txt, subs) {\r\n            var result = '',\r\n                bundle,\r\n                key,\r\n                A,\r\n                isValidToken = false;\r\n\r\n            if (angular.isString(txt) && !subs && txt.indexOf(localeConf.delimiter) !== -1) {\r\n                A = txt.split(localeConf.delimiter);\r\n                txt = A[0];\r\n                subs = angular.fromJson(A[1]);\r\n            }\r\n\r\n            isValidToken = isToken(txt);\r\n            if (isValidToken) {\r\n                if (!angular.isObject(subs)) {\r\n                    subs = [subs];\r\n                }\r\n\r\n                bundle = getBundle(txt);\r\n                if (bundle && !bundle._loading) {\r\n                    key = getKey(txt);\r\n                    if (localeConf.allowNestedJson){\r\n                        for (var i = 0; i < key.length - 1; i++) {\r\n                            if (bundle[key[i]]) {\r\n                                bundle = bundle[key[i]];\r\n                            } else {\r\n                                bundle = null;\r\n                                break;\r\n                            }\r\n                        }\r\n                        key =  key[key.length -1];\r\n                    }\r\n                    if (bundle[key]) {\r\n                        if (angular.isString(bundle[key])){\r\n                            result = applySubstitutions(bundle[key], subs);\r\n                        } else {\r\n                            $log.info('[localizationService] Key is not a string: ' + txt + '. Is it a nested object?');\r\n                            result = '%%KEY_NOT_STRING%%';\r\n                        }\r\n                    } else {\r\n                        $log.info('[localizationService] Key not found: ' + txt);\r\n                        result = '%%KEY_NOT_FOUND%%';\r\n                    }\r\n                } else {\r\n                    if (!bundle) {\r\n                        loadBundle(txt);\r\n                    }\r\n                }\r\n            } else {\r\n                result = txt;\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        function updateHtmlTagLangAttr(lang) {\r\n            lang = lang.split('-')[0];\r\n\r\n            $html.attr('lang', lang);\r\n        }\r\n\r\n        function getLanguageSupported(language) {\r\n            var foundLanguage = null;\r\n            if (language && language.length) {\r\n                localeSupported.forEach(function (languageSuppported) {\r\n                    if (languageSuppported.indexOf(language) === 0) {\r\n                        foundLanguage = languageSuppported;\r\n                        return;\r\n                    }\r\n                });\r\n                if (!foundLanguage) {\r\n                    var fallbackLang = localeFallbacks[language.split('-')[0]];\r\n                    if (!angular.isUndefined(fallbackLang)) {\r\n                      foundLanguage = fallbackLang;\r\n                    }\r\n                }\r\n            }\r\n            return foundLanguage || localeConf.defaultLocale;\r\n        }\r\n\r\n        function setLocale(value) {\r\n            var lang;\r\n\r\n            if (angular.isString(value) && value.length ) {\r\n                value = value.trim();\r\n                lang = getLanguageSupported(value);\r\n            } else {\r\n                lang = localeConf.defaultLocale;\r\n            }\r\n\r\n            if (lang !== currentLocale) {\r\n                bundles = {};\r\n                deferrences = {};\r\n                currentLocale = lang;\r\n\r\n                updateHtmlTagLangAttr(lang);\r\n\r\n                $rootScope.$broadcast(localeEvents.localeChanges, currentLocale);\r\n\r\n                if (cookieStore) {\r\n                    cookieStore.put(localeConf.cookieName, lang);\r\n                }\r\n            }\r\n        }\r\n\r\n        function getLocale() {\r\n            return currentLocale;\r\n        }\r\n\r\n        function getPreferredBrowserLanguage() {\r\n            var nav = $window.navigator,\r\n                browserLanguagePropertyKeys = ['language', 'browserLanguage', 'systemLanguage', 'userLanguage'],\r\n                i,\r\n                language;\r\n\r\n            // support for HTML 5.1 \"navigator.languages\"\r\n            if (angular.isArray(nav.languages)) {\r\n                for (i = 0; i < nav.languages.length; i++) {\r\n                    language = nav.languages[i];\r\n                    if (language) {\r\n                        return language;\r\n                    }\r\n                }\r\n            }\r\n            // support for other well known properties in browsers\r\n            for (i = 0; i < browserLanguagePropertyKeys.length; i++) {\r\n                language = nav[browserLanguagePropertyKeys[i]];\r\n                if (language) {\r\n                    return language;\r\n                }\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        function initialSetLocale() {\r\n            setLocale(cookieStore && cookieStore.get(localeConf.cookieName) ?\r\n                cookieStore.get(localeConf.cookieName) :\r\n                getPreferredBrowserLanguage());\r\n        }\r\n\r\n        initialSetLocale();\r\n\r\n        return {\r\n            ready: ready,\r\n            isToken: isToken,\r\n            getPath: getPath,\r\n            getKey: getKey,\r\n            setLocale: setLocale,\r\n            getLocale: getLocale,\r\n            getString: getLocalizedString,\r\n            getPreferredBrowserLanguage: getPreferredBrowserLanguage\r\n        };\r\n    });\r\n\nangular.module('ngLocalize')\r\n    .filter('i18n', function (locale) {\r\n        var i18nFilter = function (input, args) {\r\n            return locale.getString(input, args);\r\n        };\r\n\r\n        i18nFilter.$stateful = true;\r\n\r\n        return i18nFilter;\r\n    });\r\n\nangular.module('ngLocalize.Events', [])\r\n    .constant('localeEvents', {\r\n        resourceUpdates: 'ngLocalizeResourcesUpdated',\r\n        localeChanges: 'ngLocalizeLocaleChanged'\r\n    });\nangular.module('ngLocalize')\r\n    .directive('i18n', function ($sce, locale, localeEvents, localeConf) {\r\n        function setText(elm, tag) {\r\n            if (tag !== elm.html()) {\r\n                elm.html($sce.getTrustedHtml(tag));\r\n            }\r\n        }\r\n\r\n        function update(elm, string, optArgs) {\r\n            if (locale.isToken(string)) {\r\n                locale.ready(locale.getPath(string)).then(function () {\r\n                    setText(elm, locale.getString(string, optArgs));\r\n                });\r\n            } else {\r\n                setText(elm, string);\r\n            }\r\n        }\r\n\r\n        return function (scope, elm, attrs) {\r\n            var hasObservers;\r\n\r\n            attrs.$observe('i18n', function (newVal, oldVal) {\r\n                if (newVal && newVal !== oldVal) {\r\n                    update(elm, newVal, hasObservers);\r\n                }\r\n            });\r\n\r\n            angular.forEach(attrs.$attr, function (attr, normAttr) {\r\n                if (localeConf.observableAttrs.test(attr)) {\r\n                    attrs.$observe(normAttr, function (newVal) {\r\n                        if (newVal || !hasObservers || !hasObservers[normAttr]) {\r\n                            hasObservers = hasObservers || {};\r\n                            hasObservers[normAttr] = attrs[normAttr];\r\n                            update(elm, attrs.i18n, hasObservers);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n\r\n            scope.$on(localeEvents.resourceUpdates, function () {\r\n                update(elm, attrs.i18n, hasObservers);\r\n            });\r\n            scope.$on(localeEvents.localeChanges, function () {\r\n                update(elm, attrs.i18n, hasObservers);\r\n            });\r\n        };\r\n    })\r\n    .directive('i18nAttr', function ($rootScope, locale, localeEvents) {\r\n        function setAttr ($attrs, key, value) {\r\n            $attrs.$set($attrs.$normalize(key), value);\r\n        }\r\n\r\n        function getUpdateText ($scope, target, $attrs) {\r\n            var lastValues = {};\r\n            return function (attributes) {\r\n                var values = $scope.$eval(attributes),\r\n                    langFiles = [],\r\n                    exp;\r\n\r\n                for(var key in values) {\r\n                    exp = values[key];\r\n                    if (locale.isToken(exp) && langFiles.indexOf(locale.getPath(exp)) === -1) {\r\n                        langFiles.push(locale.getPath(exp));\r\n                    }\r\n                }\r\n\r\n                locale.ready(langFiles).then(function () {\r\n                    var value = '';\r\n                    for(var key in values) {\r\n                        exp = values[key];\r\n                        value = locale.getString(exp);\r\n                        if (lastValues[key] !== value) {\r\n                            lastValues[key] = value;\r\n                            setAttr($attrs, key, value);\r\n                        }\r\n                    }\r\n                });\r\n            };\r\n        }\r\n\r\n        return {\r\n            // ensure has higher priority than ngAria\r\n            priority: 1000,\r\n            compile: function ($elem, $attrs) {\r\n                angular.forEach($rootScope.$eval($attrs.i18nAttr), function (value, key) {\r\n                    // temporarily populate attribute\r\n                    // avoid false positive warning about aria-label\r\n                    setAttr($attrs, key, value || '...');\r\n                });\r\n\r\n                return function ($scope, $elem, $attrs) {\r\n                    var updateText = getUpdateText($scope, $elem, $attrs);\r\n\r\n                    $attrs.$observe('i18nAttr', function (newVal) {\r\n                        if (newVal) {\r\n                            updateText(newVal);\r\n                        }\r\n                    });\r\n\r\n                    $scope.$on(localeEvents.resourceUpdates, function () {\r\n                        updateText($attrs.i18nAttr);\r\n                    });\r\n\r\n                    $scope.$on(localeEvents.localeChanges, function () {\r\n                        updateText($attrs.i18nAttr);\r\n                    });\r\n                };\r\n            }\r\n        };\r\n    });\r\n\nangular.module('ngLocalize.Config', [])\r\n    .value('localeConf', {\r\n        basePath: 'languages',\r\n        defaultLocale: 'en-US',\r\n        sharedDictionary: 'common',\r\n        fileExtension: '.lang.json',\r\n        persistSelection: true,\r\n        cookieName: 'COOKIE_LOCALE_LANG',\r\n        observableAttrs: new RegExp('^data-(?!ng-|i18n)'),\r\n        delimiter: '::',\r\n        validTokens: new RegExp('^([\\\\w-]+\\\\/)*([\\\\w-]+\\\\.)+([\\\\w\\\\s-])+\\\\w(:.*)?$'),\r\n        allowNestedJson: false\r\n    });\r\n\n}(this.angular, this, this.document));\r\n"]}